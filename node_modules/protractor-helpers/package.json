{
  "_args": [
    [
      {
        "raw": "protractor-helpers",
        "scope": null,
        "escapedName": "protractor-helpers",
        "name": "protractor-helpers",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/phantom/Sites/DTNA"
    ]
  ],
  "_from": "protractor-helpers@latest",
  "_id": "protractor-helpers@1.1.0",
  "_inCache": true,
  "_location": "/protractor-helpers",
  "_nodeVersion": "7.4.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/protractor-helpers-1.1.0.tgz_1486919748255_0.9231962135527283"
  },
  "_npmUser": {
    "name": "gilamran",
    "email": "gilamran@gmail.com"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "protractor-helpers",
    "scope": null,
    "escapedName": "protractor-helpers",
    "name": "protractor-helpers",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/protractor-helpers/-/protractor-helpers-1.1.0.tgz",
  "_shasum": "08048f3149bf0640f68f5179379a3a0052084223",
  "_shrinkwrap": null,
  "_spec": "protractor-helpers",
  "_where": "/Users/phantom/Sites/DTNA",
  "bugs": {
    "url": "https://github.com/wix/wix-protractor-helpers/issues"
  },
  "dependencies": {
    "angular": "^1.4.7",
    "glob": "^5.0.15",
    "grunt-protractor-runner": "^3.0.0"
  },
  "description": "Additional matchers / locators and helpers for system tests using protractor and Jasmine",
  "devDependencies": {
    "bower": "^1.3.12",
    "grunt": "^0.4.5",
    "grunt-cli": "^0.1.13",
    "grunt-contrib-concat": "^0.5.0",
    "grunt-contrib-connect": "^0.11.2",
    "grunt-contrib-jshint": "^0.9.2",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-release": "~0.6.1",
    "jshint-stylish": "~0.1.5",
    "load-grunt-tasks": "~0.4.0",
    "path-is-absolute": "^1.0.0",
    "protractor": "^3.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "08048f3149bf0640f68f5179379a3a0052084223",
    "tarball": "https://registry.npmjs.org/protractor-helpers/-/protractor-helpers-1.1.0.tgz"
  },
  "gitHead": "9d3ff06ded53b11f02d1e36ed183d1cf0f673976",
  "homepage": "https://github.com/wix/wix-protractor-helpers#readme",
  "keywords": [
    "protractor",
    "spec",
    "helpers",
    "matchers",
    "angular",
    "e2e"
  ],
  "license": "MIT",
  "main": "dist/protractor-helpers.js",
  "maintainers": [
    {
      "name": "gilamran",
      "email": "gilamran@gmail.com"
    },
    {
      "name": "guyb",
      "email": "guyb@wix.com"
    }
  ],
  "name": "protractor-helpers",
  "optionalDependencies": {},
  "readme": "# Protractor Helpers\n\nThis library extends Protractor API with a commonly used API. It helps write more understandable and clean tests with a well-defined separation between the test logic and the app under the test logic. It consists of four extension types: elements, helpers, locators, and matchers.\n\n## Get Started\n* Get Protractor Helpers via **[npm](https://www.npmjs.com/)** by running `$ npm install --save-dev protractor-helpers` from your console.\n* In your e2e tests, import the protractor-helpers module and start using it.\n```js\nvar helpers = require('protractor-helpers');\n```\n\n## Usage\n### Elements\nThe Elements API extends `ElementArrayFinder` with:\n#### getByText(comparedTest:string) => ElementFinder\n\nexample (choosing a date from a calendar):\n```js\n$$('.calendar').getByText('27').click();\n```\n\n### Helpers\n* `not` - Returns the negative value of a Promise. \n```js\nhelpers.not($('.some-element').isDisplayed());\n```\n\n* `translate` - Returns the translated key with translation values.\n```js\nexpect($('.some-element').getText()).toEqual(helpers.translate('SOME_TRANSLATION_KEY'));\n```\n\n* `safeGet` - Navigates to a URL, maximizing the window and resetting the mouse position.\n```js\nhelpers.safeGet('./SomeUrl');\n```\n\n* `maximizeWindow` - Maximizes the window to a given size or a default size.\n```js\nhelpers.maximizeWindow(500, 500);\n```\n\n* `resetPosition` - Resets the mouse position.\n```js\nhelpers.resetPosition();\n```\n\n* `displayHover` - Displays an element that appears only on hover state.\n```js\nhelpers.displayHover($('.some-element'));\n```\n\n* `waitForElement` - Waits for an element to be shown.\n```js\nhelpers.waitForElement($('.some-element'), timeout);\n```\n\n* `waitForElementToDisappear` - Waits for an element not to be shown.\n```js\nhelpers.waitForElementToDisappear($('.some-element'), timeout);\n```\n\n* `selectOptionByText` - Selects an element from a selection box.\n```js\nhelpers.selectOptionByText($('select'), 'options-to-select');\n```\n\n* `selectOptionByIndex` - Selects an element from a selection box.\n```js\nhelpers.selectOptionByIndex($('select'), 0);\n```\n\n* `selectOption` - Selects a given option.\n```js\nhelpers.selectOption($$('select option').first());\n```\n\n* `isFirefox` - Indicates whether Firefox is the browser.\n```js\nif (helpers.isFirefox()) {\n  // Do FF stuff here . . .\n}\n```\n\n* `createMessage` - Creates a matchers message with `{{locator}}`, `{{not}}`, and `{{actual}}` as placeholders.\n```js\nhelpers.createMessage(this, 'Expected {{locator}}{{not}}to have image') + '.');\n```\n\n* `isIE` - Indicates whether Internet Explorer is the browser.\n```js\nif (helpers.isIE()) {\n  // Do IE stuff here . . .\n}\n```\n\n* `clearAndSetValue` - Allows setting a new value to an input field (rather than appending text).\n```js\nhelpers.clearAndSetValue(inputField, 'text to populate');\n```\n\n* `getFilteredConsoleErrors` - Returns console error messages resulting from the test run.\n* Ignores `livereload` error (since it is not loaded in CI mode), messages with `warn` and below severity, and a known Firefox bug (https://bugzilla.mozilla.org/show_bug.cgi?id=1127577).\n* Can be used to validate that there are no console errors.\n```js\nexpect(helpers.getFilteredConsoleErrors().length).toBe(0);\n```\n\n* `hasClass` - Checks whether an element has a class.\n```js\nhelpers.hasClass(element, 'class-name');\n```\n\n### Locators\nAdds two locators: `by.dataHook` and `by.dataHookAll`.\nSearches for element(s) with the `data-hook` attribute. For example:\n```html\n<ul>\n  <li data-hook=\"first\">First</li>\n  <li data-hook=\"second\">Second</li>\n</ul>\n```\n```js\nelement(by.dataHook('first')).click() - click on the first data hook\n```\n\n### Matchers\nThe Matchers API extends the available matchers:\n* `toBePresent` - Checks whether an element is present (exists in the DOM).\n```js\nexpect($('.some-element')).toBePresent();\n```\n\n* `toBeDisplayed` - Checks whether an element is displayed (visible in the DOM).\n```js\nexpect($('.some-element')).toBeDisplayed();\n```\n\n* `toHaveCountOf` - Checks whether the length passes to the function against the value it's invoked with.\n```js\nexpect($('.some-elements').count()).toHaveCountOf(expectedCount);\n```\n\n* `toHaveText` - Checks whether an element contains text.\n```js\nexpect($('.some-element')).toHaveText(expectedText);\n```\n\n* `toMatchRegex` - Checks whether an element's text fits a regex.\n```js\nexpect($('.some-element')).toMatchRegex(expectedPattern);\n```\n\n* `toMatchMoney` - Checks whether an element's text fits rtl money regex.\n```js\nexpect($('.some-element').getText()).toMatchMoney(expectedValue, currencySymbol);\n```\n\n* `toMatchMoneyWithFraction` - Checks whether an element's text fits rtl money regex with fraction.\n```js\nexpect($('.some-element').getText()).toMatchMoneyWithFraction(expectedValue, currencySymbol);\n```\n\n* `toHaveValue` - Checks whether an element's `value` attribute fits the `expectedValue`.\n```js\nexpect($('.some-element')).toHaveValue(expectedValue);\n```\n\n* `toHaveClass` - Checks whether an element has a specific class name.\n```js\nexpect($('.some-element')).toHaveClass(className);\n```\n\n* `toBeDisabled` - Checks whether an element is disabled.\n```js\nexpect($('.some-element')).toBeDisabled();\n```\n\n* `toBeChecked` - Checks whether an element checkbox is checked.\n```js\nexpect($('.some-element')).toBeChecked();\n```\n\n* `toBeValid` - Checks whether a form element is valid (using the `ng-valid` class name).\n```js\nexpect($('.some-element')).toBeValid();\n```\n\n* `toBeInvalid` - Checks whether a form element is invalid (using the `ng-invalid` class name).\n```js\nexpect($('.some-element')).toBeInvalid();\n```\n\n* `toBeInvalidRequired` - Checks whether a form element is invalid and required (using the `ng-invalid-required` class name).\n```js\nexpect($('.some-element')).toBeInvalidRequired();\n```\n\n* `toMatchTranslated` - Checks whether an element contains a translation value.\n```js\nexpect($('.some-element')).toMatchTranslated(key, values);\n```\n\n## License\n\nThe MIT License.\n\nSee [LICENSE](https://github.com/wix/protractor-helpers/blob/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/wix/wix-protractor-helpers.git"
  },
  "scripts": {},
  "version": "1.1.0"
}
